// Generated by view binder compiler. Do not edit!
package com.aisportspt.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.aisportspt.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemFeedbackBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView iconFeedbackType;

  @NonNull
  public final TextView textConfidence;

  @NonNull
  public final TextView textFeedbackMessage;

  @NonNull
  public final TextView textTimestamp;

  private ItemFeedbackBinding(@NonNull LinearLayout rootView, @NonNull ImageView iconFeedbackType,
      @NonNull TextView textConfidence, @NonNull TextView textFeedbackMessage,
      @NonNull TextView textTimestamp) {
    this.rootView = rootView;
    this.iconFeedbackType = iconFeedbackType;
    this.textConfidence = textConfidence;
    this.textFeedbackMessage = textFeedbackMessage;
    this.textTimestamp = textTimestamp;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemFeedbackBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemFeedbackBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_feedback, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemFeedbackBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.icon_feedback_type;
      ImageView iconFeedbackType = ViewBindings.findChildViewById(rootView, id);
      if (iconFeedbackType == null) {
        break missingId;
      }

      id = R.id.text_confidence;
      TextView textConfidence = ViewBindings.findChildViewById(rootView, id);
      if (textConfidence == null) {
        break missingId;
      }

      id = R.id.text_feedback_message;
      TextView textFeedbackMessage = ViewBindings.findChildViewById(rootView, id);
      if (textFeedbackMessage == null) {
        break missingId;
      }

      id = R.id.text_timestamp;
      TextView textTimestamp = ViewBindings.findChildViewById(rootView, id);
      if (textTimestamp == null) {
        break missingId;
      }

      return new ItemFeedbackBinding((LinearLayout) rootView, iconFeedbackType, textConfidence,
          textFeedbackMessage, textTimestamp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
