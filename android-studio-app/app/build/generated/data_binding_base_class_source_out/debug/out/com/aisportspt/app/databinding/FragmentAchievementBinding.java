// Generated by view binder compiler. Do not edit!
package com.aisportspt.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.aisportspt.app.R;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAchievementBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipLocked;

  @NonNull
  public final Chip chipUnlocked;

  @NonNull
  public final LinearLayout emptyAchievementsLayout;

  @NonNull
  public final ProgressBar progressLevel;

  @NonNull
  public final RecyclerView recyclerViewAchievements;

  @NonNull
  public final TextView textAchievements;

  @NonNull
  public final TextView textLevel;

  @NonNull
  public final TextView textStreakDays;

  @NonNull
  public final TextView textTotalHours;

  @NonNull
  public final TextView textTotalSessions;

  @NonNull
  public final TextView textXp;

  private FragmentAchievementBinding(@NonNull ScrollView rootView, @NonNull Chip chipAll,
      @NonNull Chip chipLocked, @NonNull Chip chipUnlocked,
      @NonNull LinearLayout emptyAchievementsLayout, @NonNull ProgressBar progressLevel,
      @NonNull RecyclerView recyclerViewAchievements, @NonNull TextView textAchievements,
      @NonNull TextView textLevel, @NonNull TextView textStreakDays,
      @NonNull TextView textTotalHours, @NonNull TextView textTotalSessions,
      @NonNull TextView textXp) {
    this.rootView = rootView;
    this.chipAll = chipAll;
    this.chipLocked = chipLocked;
    this.chipUnlocked = chipUnlocked;
    this.emptyAchievementsLayout = emptyAchievementsLayout;
    this.progressLevel = progressLevel;
    this.recyclerViewAchievements = recyclerViewAchievements;
    this.textAchievements = textAchievements;
    this.textLevel = textLevel;
    this.textStreakDays = textStreakDays;
    this.textTotalHours = textTotalHours;
    this.textTotalSessions = textTotalSessions;
    this.textXp = textXp;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAchievementBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAchievementBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_achievement, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAchievementBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chip_all;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chip_locked;
      Chip chipLocked = ViewBindings.findChildViewById(rootView, id);
      if (chipLocked == null) {
        break missingId;
      }

      id = R.id.chip_unlocked;
      Chip chipUnlocked = ViewBindings.findChildViewById(rootView, id);
      if (chipUnlocked == null) {
        break missingId;
      }

      id = R.id.empty_achievements_layout;
      LinearLayout emptyAchievementsLayout = ViewBindings.findChildViewById(rootView, id);
      if (emptyAchievementsLayout == null) {
        break missingId;
      }

      id = R.id.progress_level;
      ProgressBar progressLevel = ViewBindings.findChildViewById(rootView, id);
      if (progressLevel == null) {
        break missingId;
      }

      id = R.id.recycler_view_achievements;
      RecyclerView recyclerViewAchievements = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewAchievements == null) {
        break missingId;
      }

      id = R.id.text_achievements;
      TextView textAchievements = ViewBindings.findChildViewById(rootView, id);
      if (textAchievements == null) {
        break missingId;
      }

      id = R.id.text_level;
      TextView textLevel = ViewBindings.findChildViewById(rootView, id);
      if (textLevel == null) {
        break missingId;
      }

      id = R.id.text_streak_days;
      TextView textStreakDays = ViewBindings.findChildViewById(rootView, id);
      if (textStreakDays == null) {
        break missingId;
      }

      id = R.id.text_total_hours;
      TextView textTotalHours = ViewBindings.findChildViewById(rootView, id);
      if (textTotalHours == null) {
        break missingId;
      }

      id = R.id.text_total_sessions;
      TextView textTotalSessions = ViewBindings.findChildViewById(rootView, id);
      if (textTotalSessions == null) {
        break missingId;
      }

      id = R.id.text_xp;
      TextView textXp = ViewBindings.findChildViewById(rootView, id);
      if (textXp == null) {
        break missingId;
      }

      return new FragmentAchievementBinding((ScrollView) rootView, chipAll, chipLocked,
          chipUnlocked, emptyAchievementsLayout, progressLevel, recyclerViewAchievements,
          textAchievements, textLevel, textStreakDays, textTotalHours, textTotalSessions, textXp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
