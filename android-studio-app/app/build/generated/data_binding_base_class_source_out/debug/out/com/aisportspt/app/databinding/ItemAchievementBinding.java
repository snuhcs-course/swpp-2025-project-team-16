// Generated by view binder compiler. Do not edit!
package com.aisportspt.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.aisportspt.app.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAchievementBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final Chip chipAchievementType;

  @NonNull
  public final ImageView imageAchievementBg;

  @NonNull
  public final ImageView imageAchievementIcon;

  @NonNull
  public final View lockOverlay;

  @NonNull
  public final ProgressBar progressAchievement;

  @NonNull
  public final LinearLayout progressContainer;

  @NonNull
  public final TextView textAchievementDescription;

  @NonNull
  public final TextView textAchievementTitle;

  @NonNull
  public final TextView textProgress;

  @NonNull
  public final TextView textRewardPoints;

  @NonNull
  public final TextView textUnlockedDate;

  private ItemAchievementBinding(@NonNull MaterialCardView rootView,
      @NonNull Chip chipAchievementType, @NonNull ImageView imageAchievementBg,
      @NonNull ImageView imageAchievementIcon, @NonNull View lockOverlay,
      @NonNull ProgressBar progressAchievement, @NonNull LinearLayout progressContainer,
      @NonNull TextView textAchievementDescription, @NonNull TextView textAchievementTitle,
      @NonNull TextView textProgress, @NonNull TextView textRewardPoints,
      @NonNull TextView textUnlockedDate) {
    this.rootView = rootView;
    this.chipAchievementType = chipAchievementType;
    this.imageAchievementBg = imageAchievementBg;
    this.imageAchievementIcon = imageAchievementIcon;
    this.lockOverlay = lockOverlay;
    this.progressAchievement = progressAchievement;
    this.progressContainer = progressContainer;
    this.textAchievementDescription = textAchievementDescription;
    this.textAchievementTitle = textAchievementTitle;
    this.textProgress = textProgress;
    this.textRewardPoints = textRewardPoints;
    this.textUnlockedDate = textUnlockedDate;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAchievementBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAchievementBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_achievement, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAchievementBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chip_achievement_type;
      Chip chipAchievementType = ViewBindings.findChildViewById(rootView, id);
      if (chipAchievementType == null) {
        break missingId;
      }

      id = R.id.image_achievement_bg;
      ImageView imageAchievementBg = ViewBindings.findChildViewById(rootView, id);
      if (imageAchievementBg == null) {
        break missingId;
      }

      id = R.id.image_achievement_icon;
      ImageView imageAchievementIcon = ViewBindings.findChildViewById(rootView, id);
      if (imageAchievementIcon == null) {
        break missingId;
      }

      id = R.id.lock_overlay;
      View lockOverlay = ViewBindings.findChildViewById(rootView, id);
      if (lockOverlay == null) {
        break missingId;
      }

      id = R.id.progress_achievement;
      ProgressBar progressAchievement = ViewBindings.findChildViewById(rootView, id);
      if (progressAchievement == null) {
        break missingId;
      }

      id = R.id.progress_container;
      LinearLayout progressContainer = ViewBindings.findChildViewById(rootView, id);
      if (progressContainer == null) {
        break missingId;
      }

      id = R.id.text_achievement_description;
      TextView textAchievementDescription = ViewBindings.findChildViewById(rootView, id);
      if (textAchievementDescription == null) {
        break missingId;
      }

      id = R.id.text_achievement_title;
      TextView textAchievementTitle = ViewBindings.findChildViewById(rootView, id);
      if (textAchievementTitle == null) {
        break missingId;
      }

      id = R.id.text_progress;
      TextView textProgress = ViewBindings.findChildViewById(rootView, id);
      if (textProgress == null) {
        break missingId;
      }

      id = R.id.text_reward_points;
      TextView textRewardPoints = ViewBindings.findChildViewById(rootView, id);
      if (textRewardPoints == null) {
        break missingId;
      }

      id = R.id.text_unlocked_date;
      TextView textUnlockedDate = ViewBindings.findChildViewById(rootView, id);
      if (textUnlockedDate == null) {
        break missingId;
      }

      return new ItemAchievementBinding((MaterialCardView) rootView, chipAchievementType,
          imageAchievementBg, imageAchievementIcon, lockOverlay, progressAchievement,
          progressContainer, textAchievementDescription, textAchievementTitle, textProgress,
          textRewardPoints, textUnlockedDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
